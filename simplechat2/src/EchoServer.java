import java.io.*;import ocsf.server.AbstractServer;import ocsf.server.ConnectionToClient;import src.common.ChatIF;import src.ocsf.client.AbstractClient;//Class variables *************************************************    /**   * The default port to listen on.   */  final public static int DEFAULT_PORT = 5555;    ChatIF serverUI;     //Constructors ****************************************************    /**   * Constructs an instance of the echo server.   *   * @param port The port number to connect on.   */  public EchoServer(int port, ChatIF serverUI)   {    super(port);  }    //Instance methods ************************************************    /**   * This method handles any messages received from the client.   *   * @param msg The message received from the client.   * @param client The connection from which the message originated.   */  public void handleMessageFromClient    (Object msg, ConnectionToClient client)  {    System.out.println("Message received: " + msg + " from " + client);    this.sendToAllClients(msg);  }    public void handleMessageFromClientUI(String message) throws IOException  {	 	if (message.startsWith("#")) {		String [] substring = message.split(" ");		String substring1 = substring[0];		String substring2 = substring[1];		switch(substring1) {		case "quit":			quit();			break;		case "logoff":			closeConnection();						import java.io.*;			import src.common.ChatIF;			import src.ocsf.client.AbstractClient;			break;		case "login":			if  (!isConnected()) {				openConnection();			}			else { System.out.println("utilisateur déjà connecté");}			break;		case "sethost":			String substringHost = substring[1];			if (!substringHost.equals(null)) {				setHost(substringHost);			}			else { System.out.println("Sorry but your host identification is empty");}			break;		case "setport":						if (substring2==null) {				setHost(substring2);			}			else { System.out.println("Sorry but your host identification is empty");}			break;		case "gethost":			System.out.println(getHost());			break;		case "getport":			System.out.println(getPort());			break;		default:			System.out.println("Sorry but your command is not rigt typped");		}	}    try    {      sendToServer(message);    }    catch(IOException e)    {      clientUI.display        ("Could not send message to server.  Terminating client.");      quit();    }  }      /**   * This method overrides the one in the superclass.  Called   * when the server starts listening for connections.   */  protected void serverStarted()  {    System.out.println      ("Server listening for connections on port " + getPort());  }    /**   * This method overrides the one in the superclass.  Called   * when the server stops listening for connections.   */  protected void serverStopped()  {    System.out.println      ("Server has stopped listening for connections.");  }    //Class methods ***************************************************    /**   * This method is responsible for the creation of    * the server instance (there is no UI in this phase).   *   * @param args[0] The port number to listen on.  Defaults to 5555    *          if no argument is entered.   */  }//End of EchoServer class