// This file contains material supporting section 3.7 of the textbook:// "Object Oriented Software Engineering" and is issued under the open-source// license found at www.lloseng.com package client;import java.io.*;import common.ChatIF;import ocsf.client.AbstractClient;/** * This class overrides some of the methods defined in the abstract * superclass in order to give more functionality to the client. * * @author Dr Timothy C. Lethbridge * @author Dr Robert Lagani&egrave; * @author Fran&ccedil;ois B&eacute;langer * @version July 2000 */public class ChatClient extends AbstractClient{  //Instance variables **********************************************    /**   * The interface type variable.  It allows the implementation of    * the display method in the client.   */  ChatIF clientUI;   //Constructors ****************************************************    /**   * Constructs an instance of the chat client.   *   * @param host The server to connect to.   * @param port The port number to connect on.   * @param clientUI The interface type variable.   */    public ChatClient(String host, int port, ChatIF clientUI)     throws IOException   {    super(host, port); //Call the superclass constructor    this.clientUI = clientUI;    openConnection();  }    //Instance methods ************************************************      /**   * This method handles all data that comes in from the server.   *   * @param msg The message from the server.   */  public void handleMessageFromServer(Object msg)   {    clientUI.display(msg.toString());  }  /**   * This method handles all data coming from the UI               *   * @param message The message from the UI.     * @throws IOException    */  public void handleMessageFromClientUI(String message) throws IOException  {	 	if (message.startsWith("#")) {		String [] substring = message.split(" ");		String substring1 = substring[0];		String substring2 = substring[1];		switch(substring1) {		case "quit":			quit();			break;		case "logoff":			closeConnection();			break;		case "login":			if  (!isConnected()) {				openConnection();			}			else { System.out.println("utilisateur déjà connecté");}			break;		case "sethost":			String substringHost = substring[1];			if (!substringHost.equals(null)) {				setHost(substringHost);			}			else { System.out.println("Sorry but your host identification is empty");}			break;		case "setport":						if (substring2==null) {				setHost(substring2);			}			else { System.out.println("Sorry but your host identification is empty");}			break;		case "gethost":			System.out.println(getHost());			break;		case "getport":			System.out.println(getPort());			break;		default:			System.out.println("Sorry but your command is not rigt typped");		}	}    try    {      sendToServer(message);    }    catch(IOException e)    {      clientUI.display        ("Could not send message to server.  Terminating client.");      quit();    }  }    /**   * This method terminates the client.   */  public void quit()  {    try    {      closeConnection();    }    catch(IOException e) {}    System.exit(0);  }}//End of ChatClient class